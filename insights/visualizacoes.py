import streamlit as st
import pandas as pd
import plotly.express as px
import altair as alt
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def gerar_visoes(df_spotify, df_youtube, df_trends, df_x):
    """
    Gera visualiza√ß√µes para os dados coletados, adaptando-se a DataFrames vazios.
    """
    st.subheader("Visualiza√ß√µes de Tend√™ncias Culturais")

    # Fun√ß√£o auxiliar para verificar DataFrame
    def is_valid_df(df, name):
        if not isinstance(df, pd.DataFrame):
            logger.warning(f"{name} n√£o √© um DataFrame v√°lido.")
            return False
        if df.empty:
            logger.warning(f"{name} est√° vazio.")
            return False
        return True

    # 1. Visualiza√ß√£o Spotify: Top m√∫sicas por popularidade
    if is_valid_df(df_spotify, "Spotify"):
        try:
            st.subheader("üéµ Top M√∫sicas no Spotify (Popularidade)")
            df_spotify_sorted = df_spotify.sort_values(by="popularidade", ascending=False).head(10)
            fig = px.bar(
                df_spotify_sorted,
                x="nome",
                y="popularidade",
                color="artista",
                title="Top 10 M√∫sicas por Popularidade no Spotify",
                labels={"nome": "M√∫sica", "popularidade": "Popularidade"},
                color_discrete_sequence=px.colors.qualitative.Plotly
            )
            fig.update_layout(xaxis_title="M√∫sica", yaxis_title="Popularidade (0-100)", xaxis_tickangle=45)
            st.plotly_chart(fig, use_container_width=True)
            st.markdown("**Insight para produtores**: M√∫sicas com alta popularidade s√£o tend√™ncias fortes. Considere criar conte√∫do relacionado a esses artistas ou g√™neros.")
        except Exception as e:
            st.warning(f"Erro ao gerar visualiza√ß√£o do Spotify: {str(e)}")
            logger.error(f"Erro ao gerar visualiza√ß√£o do Spotify: {str(e)}")
    else:
        st.info("Nenhum dado do Spotify dispon√≠vel para visualiza√ß√£o.")

    # 2. Visualiza√ß√£o YouTube: Top v√≠deos por visualiza√ß√µes
    if is_valid_df(df_youtube, "YouTube"):
        try:
            st.subheader("üìπ Top V√≠deos no YouTube (Visualiza√ß√µes)")
            df_youtube_sorted = df_youtube.sort_values(by="visualizacoes", ascending=False).head(10)
            chart = alt.Chart(df_youtube_sorted).mark_bar().encode(
                x=alt.X("titulo:N", title="V√≠deo", sort=None),
                y=alt.Y("visualizacoes:Q", title="Visualiza√ß√µes"),
                color=alt.Color("canal:N", title="Canal"),
                tooltip=["titulo", "canal", "visualizacoes"]
            ).properties(
                title="Top 10 V√≠deos por Visualiza√ß√µes no YouTube",
                width="container"
            )
            st.altair_chart(chart, use_container_width=True)
            st.markdown("**Insight para produtores**: V√≠deos com muitas visualiza√ß√µes indicam temas ou formatos populares. Explore esses t√≥picos para v√≠deos ou colabora√ß√µes.")
        except Exception as e:
            st.warning(f"Erro ao gerar visualiza√ß√£o do YouTube: {str(e)}")
            logger.error(f"Erro ao gerar visualiza√ß√£o do YouTube: {str(e)}")
    else:
        st.info("Nenhum dado do YouTube dispon√≠vel para visualiza√ß√£o.")

    # 3. Visualiza√ß√£o Google Trends: Termos mais pesquisados
    if is_valid_df(df_trends, "Google Trends"):
        try:
            st.subheader("üîç Termos Populares no Google Trends")
            df_trends_sorted = df_trends.head(10)
            if "termo" in df_trends.columns:
                fig = px.pie(
                    df_trends_sorted,
                    names="termo",
                    title="Top 10 Termos de Pesquisa no Google Trends",
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                st.plotly_chart(fig, use_container_width=True)
                st.markdown("**Insight para produtores**: Termos populares no Google Trends refletem o interesse atual do p√∫blico. Crie conte√∫do otimizado para SEO com esses termos.")
            else:
                # Fallback para interest_over_time
                chart = alt.Chart(df_trends_sorted).mark_line().encode(
                    x=alt.X("date:T", title="Data"),
                    y=alt.Y(alt.repeat("column"), type="quantitative"),
                    color=alt.Color(alt.repeat("column"), type="nominal")
                ).repeat(
                    column=df_trends.columns[1:4].tolist()  # At√© 3 palavras-chave
                ).properties(
                    title="Interesse ao Longo do Tempo (Google Trends)",
                    width="container"
                )
                st.altair_chart(chart, use_container_width=True)
                st.markdown("**Insight para produtores**: Picos de interesse indicam momentos ideais para publicar conte√∫do relacionado a esses temas.")
        except Exception as e:
            st.warning(f"Erro ao gerar visualiza√ß√£o do Google Trends: {str(e)}")
            logger.error(f"Erro ao gerar visualiza√ß√£o do Google Trends: {str(e)}")
    else:
        st.info("Nenhum dado do Google Trends dispon√≠vel para visualiza√ß√£o.")

    # 4. Visualiza√ß√£o X: Assuntos mais discutidos
    if is_valid_df(df_x, "X"):
        try:
            st.subheader("üê¶ Assuntos Populares no X")
            df_x_sorted = df_x.sort_values(by="volume", ascending=False).head(10)
            fig = px.bar(
                df_x_sorted,
                x="assunto",
                y="volume",
                title="Top 10 Assuntos no X por Volume de Impress√µes",
                labels={"assunto": "Assunto", "volume": "Impress√µes"},
                color_discrete_sequence=px.colors.qualitative.Bold
            )
            fig.update_layout(xaxis_title="Assunto", yaxis_title="Impress√µes", xaxis_tickangle=45)
            st.plotly_chart(fig, use_container_width=True)
            st.markdown("**Insight para produtores**: Assuntos com alto volume no X s√£o virais. Crie posts ou threads explorando esses temas para engajamento.")
        except Exception as e:
            st.warning(f"Erro ao gerar visualiza√ß√£o do X: {str(e)}")
            logger.error(f"Erro ao gerar visualiza√ß√£o do X: {str(e)}")
    else:
        st.info("Nenhum dado do X dispon√≠vel para visualiza√ß√£o.")
